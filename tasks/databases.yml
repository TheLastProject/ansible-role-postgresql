---
- name: Ensure PostgreSQL databases are present.
  postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(postgresql_user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_databases }}"
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true
  register: postgresql_databases_results

- name: Copy population scripts to host
  template:
    src: "postgresql_population_scripts/{{ item.item.run_sql_script }}"
    dest: "/tmp/{{ item.item.run_sql_script }}"
  with_items: "{{ postgresql_databases_results.results }}"
  when: item.changed and 'run_sql_script' in item.item and ('state' not in item.item or item.item.state != 'absent')

- name: Ensure PostgreSQL databases are populated.
  postgresql_db:
    name: "{{ item.item.name }}"
    lc_collate: "{{ item.item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.item.encoding | default('UTF-8') }}"
    template: "{{ item.item.template | default('template0') }}"
    login_host: "{{ item.item.login_host | default('localhost') }}"
    login_password: "{{ item.item.login_password | default(omit) }}"
    login_user: "{{ item.item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.item.port | default(omit) }}"
    owner: "{{ item.item.owner | default(postgresql_user) }}"
    state: "restore"
    target: "/tmp/{{ item.item.run_sql_script }}"
  with_items: "{{ postgresql_databases_results.results }}"
  when: item.changed and 'run_sql_script' in item.item and ('state' not in item.item or item.item.state != 'absent')
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true
